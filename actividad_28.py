# -*- coding: utf-8 -*-
"""Actividad_28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1fCZxsOBZYyCMEGQ00nf38ZdwI7oHjc
"""

# Paso 1: Importar librer√≠as necesarias
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Paso 2: Generar datos sint√©ticos
np.random.seed(42)
n = 1000
X1 = np.random.rand(n)
X2 = np.random.rand(n)
X3 = np.random.rand(n)

# Crear relaci√≥n lineal exacta con poco ruido
Y = 5 * X1*X2 - 3 * X2 + 2 * X3 + np.random.normal(0, 0.05, n)

X = np.stack((X1, X2, X3), axis=1)

# Paso 3: Dividir y normalizar
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Paso 4: Definir modelo de red neuronal m√°s robusto
modelo = tf.keras.Sequential([
    tf.keras.layers.Dense(16, activation='relu', input_shape=(3,)),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(1)  # salida lineal
])

modelo.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),
                loss='mse', metrics=['mae'])

# Paso 5: Entrenar modelo
historial = modelo.fit(X_train, y_train, epochs=200, verbose=0)

# Paso 6: Evaluar el modelo
loss, mae = modelo.evaluate(X_test, y_test)
print(f"‚úÖ P√©rdida en test (MSE): {loss:.6f}")
print(f"üìè MAE (Error absoluto medio): {mae:.6f}")

# Paso 7: Graficar p√©rdida
plt.figure(figsize=(10,4))
plt.plot(historial.history['loss'], label="MSE entrenamiento")
plt.xlabel("√âpoca")
plt.ylabel("P√©rdida")
plt.title("P√©rdida durante el entrenamiento")
plt.legend()
plt.grid(True)
plt.show()

# Paso 8: Comparar reales vs predichos
y_pred = modelo.predict(X_test).flatten()
plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')
plt.xlabel("Valor real")
plt.ylabel("Predicci√≥n")
plt.title("Predicci√≥n vs Real")
plt.grid(True)
plt.show()